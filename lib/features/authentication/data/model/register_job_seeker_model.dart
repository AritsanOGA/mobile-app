import 'package:artisan_oga/features/authentication/domain/entities/register_job_seeker_entity.dart';
import 'package:dio/dio.dart';

class RegisterJobSeekerModel extends RegisterJobSeekerEntity {
  const RegisterJobSeekerModel(
      {required super.email,
      required super.password,
      required super.confirmPassword,
      required super.country,
      required super.fullName,
      required super.companyName,
      required super.state,
      required super.city,
      required super.passport,
      required super.resume,
      required super.gender,
      required super.phoneNumber,
      required super.jobType,
      required super.guarantorName,
      required super.guarantorEmail,
      required super.residentialAddress,
      required super.yearsOfExperience,
      required super.describeYourRole,
      required super.category,
      required super.dateOFBirth,
      required super.skill,
      required super.role,
      required super.description,
      required super.startYear,
      required super.endYear,
      required super.schoolName,
      required super.educationalQualification,
      required super.certificateObtained,
      required super.graduationYear,
      required super.streetAddress,
      required super.courseName,
      required super.employmentHistory,
      required super.guarantorPhoneNumber});

  factory RegisterJobSeekerModel.fromEntity(RegisterJobSeekerEntity entity) =>
      RegisterJobSeekerModel(
        email: entity.email,
        password: entity.password,
        confirmPassword: entity.confirmPassword,
        country: entity.country,
        fullName: entity.fullName,
        companyName: entity.companyName,
        state: entity.state,
        city: entity.city,
        passport: entity.passport,
        resume: entity.resume,
        gender: entity.gender,
        phoneNumber: entity.phoneNumber,
        jobType: entity.jobType,
        guarantorName: entity.guarantorName,
        residentialAddress: entity.residentialAddress,
        guarantorEmail: entity.guarantorEmail,
        yearsOfExperience: entity.yearsOfExperience,
        describeYourRole: entity.describeYourRole,
        dateOFBirth: entity.dateOFBirth,
        role: entity.role,
        description: entity.description,
        schoolName: entity.schoolName,
        endYear: entity.endYear,
        skill: entity.skill,
        category: entity.category,
        startYear: entity.startYear,
        graduationYear: entity.graduationYear,
        certificateObtained: entity.certificateObtained,
        educationalQualification: entity.educationalQualification,
        streetAddress: entity.streetAddress,
        courseName: entity.courseName,
        employmentHistory: entity.employmentHistory,
        guarantorPhoneNumber: entity.guarantorPhoneNumber,
      );

  Future<FormData> toJson() async => FormData.fromMap({
        'email': email,
        'password': password,
        'password_confirmation': confirmPassword,
        'country': country,
        'fullname': fullName,
        'company_name': companyName,
        'states': state,
        'employment_history': employmentHistory,
        'city': city,
        'passport': await MultipartFile.fromFile(
          "${passport?.path}",
          filename: "${passport?.path.split('/').last}",
        ),
        'resume': resume?.path != null
            ? await MultipartFile.fromFile(
                "${resume?.path}",
                filename: "${resume?.path.split('/').last}",
              )
            : 'i am null',
        'gender': gender,
        'phone': phoneNumber,
        'DateOfBirth': dateOFBirth,
        'end_year': endYear,
        'start_year': startYear,
        'education_qualification': educationalQualification,
        'school_name': schoolName,
        'award_year': graduationYear,
        'award_title': certificateObtained,
        'categories': category,
        'artisan_skills': skill,
        'guarantor_name': guarantorName,
        'guarantor_email': guarantorEmail,
        'guarantor_address': residentialAddress,
        'job_type': jobType,
        'years_of_experience': yearsOfExperience,
        'job_title': role,
        'course_name': courseName,
        'StreetAddress': streetAddress,
        'job_description': describeYourRole,
        'service_description': description,
        'guarantor_phone': guarantorPhoneNumber
      });
}
